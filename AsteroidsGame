

// #include <string>
// #define OLC_PGE_APPLICATION
// #include "../lib/"
// #include"../include"
// using namespace std;

// const float PI = 3.1415926f;

// struct GameObject{
//     float x,y;
//     float dx, dy; 
//     int size;
//     float angle;
//     bool active;
// };

// class AsteroidsGame : public olc:: PixelGameengine
// {
// private:
//     int level; 
//     int score; 
//     GameObject player; 
//     vertor<GameObject> asteroids;
//     vector<GameObject> bullets;
//     vector<pair<float, float>> playerModel;
//     vector<pari<float,float>> asteroidModel;
    
//     void WrapCoordinates(float xi, float yi, float &xo, float&yo)
//     {
//         xo = xi;
//         yo = yi; 
//         if(xo < 0){
//             xo += ScreenWidth();
//         }
//         if (xo >= ScreenWidth()) {
//             xo -= ScreenWidth();
//         }
//         if (yo < 0) {
//             yo += ScreenHeight();
//         }
//         if (yo >= ScreenHeight()) {
//             yo -= ScreenHeight();
//         }
//     }
// public:
// virtual bool OnUserCreate() override
// {
//     playerModel.push_back(make_pair(-1, 1));
//     playerModel.push_back(make_pair(1, 1));
//     playerModel.push_back(make_pair(0, -2));

//     for(int i = 0; i < 20; i++){
//         float angle = (float) i / 20.0f * 2.0f * PI;
//         float radius = (float)rand() / float RAND_MAX * 0.4 + 0.8;
//         asteroidModel.push_back(make_pair(radius * sing(angle), radius * cos(angle)));
//     }
//     ResetGame();

//     return true;
// }

// virtual bool OnUserUpdsate(float fElapsedTime) override
// {
//     Clear(olc::BLACK);

//     if(GetKey(oldc::LEFT).bHeld){
//         player.angle -= 5.0f * fElapsedTime;
//     }

//     if(GetKey(olc::RIGHT)bHeld){
//         player.angle += 5.0f * fElapsedTime;
//     }

//     const float playerAccel = 0.1f;

//     if(GetKey(olc::UP).bHeld){
//         player.dx += sin(player.angle) & playerAccel * fElapsedTime;
//         player.dy += -cos(player.angle) * playerAccel * fElapsedTime;
//     }

//     const float bulletSpeed = 0.2f;

//     if(GetKey(olc::SPACE).bReleased){
//         bullets.push_back({ player.x,player.y, bulletSpeed * sin(player.angle), -bulletSpeed * cos(player.angle), 0, 0.0f, true});
//     }

//     player.x += player.dx; 
//     player.y += player.dy;

//     WrapCoordinates(player.x, player.y, player.x, player.y); 


//     for(auto &a : asteroids) {
//         a.x += a.dx * fElapsedTime;
//         a.y += a.dy * fElapsedTime;
//         a.angle += 0.5f * fElapsedTime;

//         WrapCoordinates(a.x,a.y,a.x,a.y);

//         DrawWireFrameModel(asteroidModel, a.x, a.y, a.angle, a.size, olc::YELLOW);

//         if(PointInsideCircle(player.x, player.y, a.x, a.y, a.size)){
//             ResetGame();
//         }
//     }

    

// }



//     AsteroidsGame(/* args */);
//     ~AsteroidsGame();
// };

// AsteroidsGame::AsteroidsGame(/* args */)
// {
// }

// AsteroidsGame::~AsteroidsGame()
// {
// }
